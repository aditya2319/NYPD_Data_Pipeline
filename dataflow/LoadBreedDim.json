{
	"name": "LoadBreedDim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "pet_license_stage_v2",
						"type": "DatasetReference"
					},
					"name": "importingfromstagetable"
				},
				{
					"dataset": {
						"referenceName": "BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "maxBreedDim"
				},
				{
					"dataset": {
						"referenceName": "BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "importingbreeddim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "Loadingbreeddim"
				}
			],
			"transformations": [
				{
					"name": "crossJoin"
				},
				{
					"name": "AggregrateTable"
				},
				{
					"name": "leftjoin"
				},
				{
					"name": "filterringNull"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "SK"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> importingfromstagetable",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(BREED_SK),0) AS\\nMaxBreedSK FROM BREED_DIM',",
				"     format: 'query') ~> maxBreedDim",
				"source(output(",
				"          BREED_SK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> importingbreeddim",
				"importingfromstagetable, maxBreedDim join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> crossJoin",
				"crossJoin aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          MAXBREEDSK),",
				"     count_row = count(LICENSE_NUMBER)) ~> AggregrateTable",
				"AggregrateTable, importingbreeddim join(SPECIES == BREED_SK",
				"     && PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftjoin",
				"leftjoin filter(isNull(SPECIES_NAME)&&isNull(PRIMARY_BREED_NAME)&&isNull(SECONDARY_BREED_NAME)) ~> filterringNull",
				"filterringNull keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(BREED_SK = MAXBREEDSK+RowNum,",
				"          DI_CREATED_DT = currentTimestamp(),",
				"          DI_JOB_ID = uuid()) ~> SK",
				"SK sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BREED_SK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BREED_SK,",
				"          SPECIES_NAME = SPECIES,",
				"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
				"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT = DI_CREATED_DT",
				"     )) ~> Loadingbreeddim"
			]
		}
	}
}